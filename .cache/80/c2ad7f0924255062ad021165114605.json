{"id":"dist/index.js","dependencies":[{"name":"D:\\workspace\\openSource\\J3D\\dist\\index.js.map","includedInParent":true,"mtime":1555525087495},{"name":"D:\\workspace\\openSource\\J3D\\package.json","includedInParent":true,"mtime":1555525087242}],"generated":{"js":"var define;\nvar global = arguments[3];\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\nparcelRequire = function (modules, cache, entry, globalName) {\n  // Save the require from previous bundle to this closure if any\n  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;\n  var nodeRequire = typeof require === 'function' && require;\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;\n\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        } // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n\n\n        if (previousRequire) {\n          return previousRequire(name, true);\n        } // Try the node require function if it exists.\n\n\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error('Cannot find module \\'' + name + '\\'');\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n      var module = cache[name] = new newRequire.Module(name);\n      modules[name][0].call(module.exports, localRequire, module, module.exports, this);\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      return newRequire(localRequire.resolve(x));\n    }\n\n    function resolve(x) {\n      return modules[name][1][x] || x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n\n  newRequire.register = function (id, exports) {\n    modules[id] = [function (require, module) {\n      module.exports = exports;\n    }, {}];\n  };\n\n  var error;\n\n  for (var i = 0; i < entry.length; i++) {\n    try {\n      newRequire(entry[i]);\n    } catch (e) {\n      // Save first error but execute all entries\n      if (!error) {\n        error = e;\n      }\n    }\n  }\n\n  if (entry.length) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(entry[entry.length - 1]); // CommonJS\n\n    if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {\n      module.exports = mainExports; // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n      define(function () {\n        return mainExports;\n      }); // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  } // Override the current require with this new one\n\n\n  parcelRequire = newRequire;\n\n  if (error) {\n    // throw error from earlier, _after updating parcelRequire_\n    throw error;\n  }\n\n  return newRequire;\n}({\n  \"index.js\": [function (require, module, exports) {\n    console.log('aaa');\n  }, {}],\n  \"C:/Users/Jayce/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js\": [function (require, module, exports) {\n    var global = arguments[3];\n    var OVERLAY_ID = '__parcel__error__overlay__';\n    var OldModule = module.bundle.Module;\n\n    function Module(moduleName) {\n      OldModule.call(this, moduleName);\n      this.hot = {\n        data: module.bundle.hotData,\n        _acceptCallbacks: [],\n        _disposeCallbacks: [],\n        accept: function accept(fn) {\n          this._acceptCallbacks.push(fn || function () {});\n        },\n        dispose: function dispose(fn) {\n          this._disposeCallbacks.push(fn);\n        }\n      };\n      module.bundle.hotData = null;\n    }\n\n    module.bundle.Module = Module;\n    var checkedAssets, assetsToAccept;\n    var parent = module.bundle.parent;\n\n    if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n      var hostname = \"\" || location.hostname;\n      var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n      var ws = new WebSocket(protocol + '://' + hostname + ':' + \"10439\" + '/');\n\n      ws.onmessage = function (event) {\n        checkedAssets = {};\n        assetsToAccept = [];\n        var data = JSON.parse(event.data);\n\n        if (data.type === 'update') {\n          var handled = false;\n          data.assets.forEach(function (asset) {\n            if (!asset.isNew) {\n              var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n\n              if (didAccept) {\n                handled = true;\n              }\n            }\n          }); // Enable HMR for CSS by default.\n\n          handled = handled || data.assets.every(function (asset) {\n            return asset.type === 'css' && asset.generated.js;\n          });\n\n          if (handled) {\n            console.clear();\n            data.assets.forEach(function (asset) {\n              hmrApply(global.parcelRequire, asset);\n            });\n            assetsToAccept.forEach(function (v) {\n              hmrAcceptRun(v[0], v[1]);\n            });\n          } else {\n            window.location.reload();\n          }\n        }\n\n        if (data.type === 'reload') {\n          ws.close();\n\n          ws.onclose = function () {\n            location.reload();\n          };\n        }\n\n        if (data.type === 'error-resolved') {\n          console.log('[parcel] âœ¨ Error resolved');\n          removeErrorOverlay();\n        }\n\n        if (data.type === 'error') {\n          console.error('[parcel] ðŸš¨  ' + data.error.message + '\\n' + data.error.stack);\n          removeErrorOverlay();\n          var overlay = createErrorOverlay(data);\n          document.body.appendChild(overlay);\n        }\n      };\n    }\n\n    function removeErrorOverlay() {\n      var overlay = document.getElementById(OVERLAY_ID);\n\n      if (overlay) {\n        overlay.remove();\n      }\n    }\n\n    function createErrorOverlay(data) {\n      var overlay = document.createElement('div');\n      overlay.id = OVERLAY_ID; // html encode message and stack trace\n\n      var message = document.createElement('div');\n      var stackTrace = document.createElement('pre');\n      message.innerText = data.error.message;\n      stackTrace.innerText = data.error.stack;\n      overlay.innerHTML = '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' + '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' + '<span style=\"top: 2px; margin-left: 5px; position: relative;\">ðŸš¨</span>' + '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';\n      return overlay;\n    }\n\n    function getParents(bundle, id) {\n      var modules = bundle.modules;\n\n      if (!modules) {\n        return [];\n      }\n\n      var parents = [];\n      var k, d, dep;\n\n      for (k in modules) {\n        for (d in modules[k][1]) {\n          dep = modules[k][1][d];\n\n          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n            parents.push(k);\n          }\n        }\n      }\n\n      if (bundle.parent) {\n        parents = parents.concat(getParents(bundle.parent, id));\n      }\n\n      return parents;\n    }\n\n    function hmrApply(bundle, asset) {\n      var modules = bundle.modules;\n\n      if (!modules) {\n        return;\n      }\n\n      if (modules[asset.id] || !bundle.parent) {\n        var fn = new Function('require', 'module', 'exports', asset.generated.js);\n        asset.isNew = !modules[asset.id];\n        modules[asset.id] = [fn, asset.deps];\n      } else if (bundle.parent) {\n        hmrApply(bundle.parent, asset);\n      }\n    }\n\n    function hmrAcceptCheck(bundle, id) {\n      var modules = bundle.modules;\n\n      if (!modules) {\n        return;\n      }\n\n      if (!modules[id] && bundle.parent) {\n        return hmrAcceptCheck(bundle.parent, id);\n      }\n\n      if (checkedAssets[id]) {\n        return;\n      }\n\n      checkedAssets[id] = true;\n      var cached = bundle.cache[id];\n      assetsToAccept.push([bundle, id]);\n\n      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n        return true;\n      }\n\n      return getParents(global.parcelRequire, id).some(function (id) {\n        return hmrAcceptCheck(global.parcelRequire, id);\n      });\n    }\n\n    function hmrAcceptRun(bundle, id) {\n      var cached = bundle.cache[id];\n      bundle.hotData = {};\n\n      if (cached) {\n        cached.hot.data = bundle.hotData;\n      }\n\n      if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n        cached.hot._disposeCallbacks.forEach(function (cb) {\n          cb(bundle.hotData);\n        });\n      }\n\n      delete bundle.cache[id];\n      bundle(id);\n      cached = bundle.cache[id];\n\n      if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n        cached.hot._acceptCallbacks.forEach(function (cb) {\n          cb();\n        });\n\n        return true;\n      }\n    }\n  }, {}]\n}, {}, [\"C:/Users/Jayce/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js\", \"index.js\"], null);"},"sourceMaps":{"js":{"mappings":[{"source":"index.js","name":"console","original":{"line":1,"column":0},"generated":{"line":5,"column":0}}],"sources":{"index.js":"console.log('aaa')"},"lineCount":null}},"error":null,"hash":"72c6e1226d61ec93e3a0cbc26251418b","cacheData":{"env":{}}}